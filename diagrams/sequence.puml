@startuml
actor User
participant GreenhouseSensor
participant GreenhouseActuator
participant LDR
participant DHT11
participant DynamoDB
participant MQTT
participant Servo
participant AWS_IoT

== Sensor Monitoring ==
User -> GreenhouseSensor : Request sensor monitoring
GreenhouseSensor -> LDR : Call readData()
LDR -> GreenhouseSensor : Returns light level
GreenhouseSensor -> DHT11 : Call readTemperature() and readHumidity()
DHT11 -> GreenhouseSensor : Returns temperature and humidity
GreenhouseSensor -> DynamoDB : Save sensor data in DynamoDB
DynamoDB -> GreenhouseSensor : Confirm storage
GreenhouseSensor -> MQTT : Publish sensor data to AWS IoT
MQTT -> AWS_IoT : Post in topic "$aws/things/greenhouse_0001/shadow/update"
AWS_IoT -> MQTT : Confirms publication

== Actuator Control ==
GreenhouseSensor -> GreenhouseActuator : Notify sensor data update
GreenhouseActuator -> Servo : Control servos (blinds or irrigation)
Servo -> GreenhouseActuator : Confirms action
GreenhouseActuator -> MQTT : Publish actuator status to AWS IoT
MQTT -> AWS_IoT : Post actuator status
AWS_IoT -> MQTT : Confirms publication

== Integration with Alexa ==
User -> AWS_IoT : Query greenhouse status via Alexa
AWS_IoT -> MQTT : Retrieve latest sensor and actuator data
MQTT -> AWS_IoT : Returns data
AWS_IoT -> User : Provide updated status
@enduml